import {Font, Glyph, GridType} from "./types";

const SZENDO_FONT: Font = {
    lineHeight: 12,
    glyphMap: {
        "A": {
            advance: 8,
            parts: [
                [[0, 8], [0, 2], [2, 0], [4, 0], [6, 2], [6, 8], [6, 4], [0, 4]],
            ]
        },
        "B": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [4, 0], [6, 2], [4, 4], [0, 4], [4, 4], [6, 6], [4, 8], [0, 8]],
            ]
        },
        "C": {
            advance: 8,
            parts: [
                [[6, 2], [4, 0], [2, 0], [0, 2], [0, 6], [2, 8], [4, 8], [6, 6]],
            ]
        },
        "D": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [4, 0], [6, 2], [6, 6], [4, 8], [0, 8]],
            ]
        },
        "E": {
            advance: 8,
            parts: [
                [[6, 0], [0, 0], [0, 4], [4, 4], [0, 4], [0, 8], [6, 8]],
            ]
        },
        "F": {
            advance: 8,
            parts: [
                [[6, 0], [0, 0], [0, 4], [4, 4], [0, 4], [0, 8]],
            ]
        },
        "G": {
            advance: 8,
            parts: [
                [[6, 2], [4, 0], [2, 0], [0, 2], [0, 6], [2, 8], [4, 8], [6, 6], [6, 4], [4, 4]],
            ]
        },
        "H": {
            advance: 8,
            parts: [
                [[0, 0], [0, 8], [0, 4], [6, 4], [6, 0], [6, 8]],
            ]
        },
        "I": {
            advance: 8,
            parts: [
                [[0, 8], [6, 8], [3, 8], [3, 0], [6, 0], [0, 0]],
            ]
        },
        "J": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [6, 6], [4, 8], [2, 8], [0, 6]],
                [[4, 4], [6, 4]],
            ]
        },
        "K": {
            advance: 8,
            parts: [
                [[0, 0], [0, 8], [0, 4], [4, 4], [6, 8]],
                [[2, 4], [6, 0]],
            ]
        },
        "L": {
            advance: 8,
            parts: [
                [[0, 0], [0, 8], [6, 8]],
            ]
        },
        "M": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [3, 4], [6, 0], [6, 8]],
            ]
        },
        "N": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [6, 8], [6, 0]],
            ]
        },
        "O": {
            advance: 8,
            parts: [
                [[2, 0], [4, 0], [6, 2], [6, 6], [4, 8], [2, 8], [0, 6], [0, 2], [2, 0]],
            ]
        },
        "P": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [4, 0], [6, 2], [4, 4], [0, 4]],
            ]
        },
        "Q": {
            advance: 8,
            parts: [
                [[2, 0], [4, 0], [6, 2], [6, 6], [4, 8], [2, 8], [0, 6], [0, 2], [2, 0]],
                [[4, 6], [6, 8]],
            ]
        },
        "R": {
            advance: 8,
            parts: [
                [[0, 8], [0, 0], [4, 0], [6, 2], [4, 4], [0, 4], [4, 4], [6, 8]],
            ]
        },
        "S": {
            advance: 8,
            parts: [
                [[6, 2], [5, 0], [1, 0], [0, 2], [1, 4], [5, 4], [6, 6], [5, 8], [1, 8], [0, 6]],
            ]
        },
        "T": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [3, 0], [3, 8]],
            ]
        },
        "U": {
            advance: 8,
            parts: [
                [[0, 0], [0, 6], [2, 8], [4, 8], [6, 6], [6, 0]],
            ]
        },
        "V": {
            advance: 8,
            parts: [
                [[0, 0], [3, 8], [6, 0]],
            ]
        },
        "W": {
            advance: 8,
            parts: [
                [[0, 0], [1, 8], [3, 4], [5, 8], [6, 0]],
            ]
        },
        "X": {
            advance: 8,
            parts: [
                [[0, 0], [6, 8]],
                [[0, 8], [6, 0]],
            ]
        },
        "Y": {
            advance: 8,
            parts: [
                [[0, 0], [3, 4], [3, 8], [3, 4], [6, 0]],
            ]
        },
        "Z": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [0, 8], [6, 8]],
                [[1, 4], [5, 4]],
            ]
        },
        ".": {
            advance: 8,
            parts: [
                [[3, 8]],
            ]
        },
        ",": {
            advance: 8,
            parts: [
                [[3, 6], [2, 8]],
            ]
        },
        "!": {
            advance: 8,
            parts: [
                [[3, 0], [3, 6]],
                [[3, 8]],
            ]
        },
        "?": {
            advance: 8,
            parts: [
                [[0, 2], [1, 0], [5, 0], [6, 2], [5, 4], [3, 4], [3, 6]],
                [[3, 8]],
            ]
        },
        "0": {
            advance: 8,
            parts: [
                [[1, 0], [5, 0], [6, 2], [6, 6], [5, 8], [1, 8], [0, 6], [0, 2], [1, 0]],
                [[4, 2], [2, 6]],
            ]
        },
        "1": {
            advance: 8,
            parts: [
                [[0, 2], [3, 0], [3, 8], [1, 8], [5, 8]],
            ]
        },
        "2": {
            advance: 8,
            parts: [
                [[0, 2], [1, 0], [5, 0], [6, 2], [5, 4], [0, 6], [0, 8], [6, 8]],
            ]
        },
        "3": {
            advance: 8,
            parts: [
                [[0, 2], [1, 0], [5, 0], [6, 2], [5, 4], [3, 4], [5, 4], [6, 6], [5, 8], [1, 8], [0, 6]],
            ]
        },
        "4": {
            advance: 8,
            parts: [
                [[4, 8], [4, 0], [0, 6], [6, 6]],
            ]
        },
        "5": {
            advance: 8,
            parts: [
                [[6, 0], [0, 0], [1, 4], [5, 4], [6, 6], [5, 8], [1, 8], [0, 6]],
            ]
        },
        "6": {
            advance: 8,
            parts: [
                [[6, 2], [5, 0], [1, 0], [0, 2], [0, 6], [1, 8], [5, 8], [6, 6], [5, 4], [1, 4], [0, 6]],
            ]
        },
        "7": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [1, 8]],
                [[2, 4], [5, 4]],
            ]
        },
        "8": {
            advance: 8,
            parts: [
                [[1, 4], [0, 2], [1, 0], [5, 0], [6, 2], [5, 4], [1, 4], [0, 6], [1, 8], [5, 8], [6, 6], [5, 4]],
            ]
        },
        "9": {
            advance: 8,
            parts: [
                [[6, 2], [5, 0], [1, 0], [0, 2], [1, 4], [5, 4], [6, 2], [6, 6], [5, 8], [1, 8], [0, 6]],
            ]
        },
        "+": {
            advance: 8,
            parts: [
                [[1, 4], [5, 4]],
                [[3, 2], [3, 6]],
            ]
        },
        "-": {
            advance: 8,
            parts: [
                [[1, 4], [5, 4]],
            ]
        },
        "_": {
            advance: 8,
            parts: [
                [[0, 8], [6, 8]],
            ]
        },
        "'": {
            advance: 8,
            parts: [
                [[3, 0], [3, 2]],
            ]
        },
        "\"": {
            advance: 8,
            parts: [
                [[2, 0], [2, 2]],
                [[4, 0], [4, 2]],
            ]
        },
        "#": {
            advance: 8,
            parts: [
                [[2, 0], [1, 8]],
                [[5, 0], [4, 8]],
                [[0, 2], [6, 2]],
                [[0, 6], [6, 6]],
            ]
        },
        "*": {
            advance: 4,
            parts: [
                [[0, 3], [2, 5]],
                [[2, 3], [0, 5]],
            ]
        },
        "/": {
            advance: 8,
            parts: [
                [[1, 8], [5, 0]],
            ]
        },
        "<": {
            advance: 8,
            parts: [
                [[6, 2], [0, 4], [6, 6]],
            ]
        },
        ">": {
            advance: 8,
            parts: [
                [[0, 2], [6, 4], [0, 6]],
            ]
        },
        "(": {
            advance: 4,
            parts: [
                [[2, 0], [0, 2], [0, 6], [2, 8]],
            ]
        },
        ")": {
            advance: 4,
            parts: [
                [[0, 0], [2, 2], [2, 6], [0, 8]],
            ]
        },
        "=": {
            advance: 8,
            parts: [
                [[0, 3], [6, 3]],
                [[0, 5], [6, 5]],
            ]
        },
        " ": {
            advance: 8,
            parts: []
        },
    },
};
const FONT: Font = {
    lineHeight: SZENDO_FONT.lineHeight,
    glyphMap: {
        ...SZENDO_FONT.glyphMap,
        "J": {
            advance: 8,
            parts: [
                [[3, 0], [6, 0]],
                [[5, 0], [5, 6.5], [3.5, 8], [1.5, 8], [0, 6.5]],
            ]
        },
        "Z": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [0, 8], [6, 8]],
            ]
        },
        "7": {
            advance: 8,
            parts: [
                [[0, 0], [6, 0], [1, 8]],
            ]
        },
    },
};

const NULL_GLYPH: Glyph = {
    advance: 8,
    parts: [
        [[0, 0], [6, 0], [6, 8], [0, 8], [0, 0], [6, 8]],
        [[6, 0], [0, 8]],
    ],
};

export const getLineHeight = (): number => FONT.lineHeight;

export const getGlyph = (char: string, gridType: GridType = GridType.DEFAULT): Readonly<Glyph> => {
    let font: Font;
    switch (gridType) {
        case GridType.DEFAULT:
        case GridType.SMALL:
            font = FONT;
            break;
        case GridType.SZENDO:
        case GridType.SMALL_SZENDO:
            font = SZENDO_FONT;
            break;
        default:
            throw new Error(`Unknown grid type: ${gridType}`);
    }
    return font.glyphMap[char] ?? NULL_GLYPH;
};
